"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[3491],{3491:n=>{n.exports="import { Component, ViewChild, ViewEncapsulation } from '@angular/core'\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport Dropzone from 'dropzone'\nimport { DropzoneComponent, DropzoneConfig, DropzoneDirective } from 'nxt-dropzone-wrapper'\n\n@Component({\n    selector: 'app-sandbox',\n    templateUrl: './sandbox.component.html',\n    styleUrls: ['./sandbox.component.scss'],\n    encapsulation: ViewEncapsulation.Emulated\n})\nexport class SandboxComponent {\n\n    type: 'component' | 'directive' = 'component'\n\n    disabled = false\n    autoReset = false\n\n    config: DropzoneConfig = {\n        clickable: true,\n        maxFiles: 1\n    }\n\n    @ViewChild(DropzoneComponent) componentRef?: DropzoneComponent\n    @ViewChild(DropzoneDirective) directiveRef?: DropzoneDirective\n\n    onUploadInit(dz: Dropzone) {\n        console.log('onUploadInit:', dz)\n    }\n\n    onUploadSuccess(args: any) {\n        console.log('onUploadSuccess:', args)\n    }\n\n    onUploadError([dz, err]: [Dropzone.DropzoneFile, string | Error]) {\n        console.log('onUploadError:', dz, err)\n    }\n\n    toggleAutoReset(value: boolean) {\n        this.autoReset = !!value\n        const timeout = this.autoReset ? 5000 : undefined\n        this.config.autoReset = timeout\n        this.config.errorReset = timeout\n        this.config.cancelReset = timeout\n    }\n\n    resetDropzone(): void {\n        if (this.type === 'directive' && this.directiveRef) {\n            this.directiveRef.reset()\n        } else if (this.type === 'component' && this.componentRef && this.componentRef.directiveRef) {\n            this.componentRef.directiveRef.reset()\n        }\n    }\n\n}\n"}}]);