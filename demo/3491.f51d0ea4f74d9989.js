"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[3491],{3491:n=>{n.exports="import { Component, ViewChild, ViewEncapsulation } from '@angular/core'\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport Dropzone from 'dropzone'\r\nimport { DropzoneComponent, DropzoneConfig, DropzoneDirective } from 'nxt-dropzone-wrapper'\r\n\r\n@Component({\r\n    selector: 'app-sandbox',\r\n    templateUrl: './sandbox.component.html',\r\n    styleUrls: ['./sandbox.component.scss'],\r\n    encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class SandboxComponent {\r\n\r\n    type: 'component' | 'directive' = 'component'\r\n\r\n    disabled = false\r\n    autoReset = false\r\n\r\n    config: DropzoneConfig = {\r\n        clickable: true,\r\n        maxFiles: 1\r\n    }\r\n\r\n    @ViewChild(DropzoneComponent) componentRef?: DropzoneComponent\r\n    @ViewChild(DropzoneDirective) directiveRef?: DropzoneDirective\r\n\r\n    onUploadInit(dz: Dropzone) {\r\n        console.log('onUploadInit:', dz)\r\n    }\r\n\r\n    onUploadSuccess(args: any) {\r\n        console.log('onUploadSuccess:', args)\r\n    }\r\n\r\n    onUploadError([dz, err]: [Dropzone.DropzoneFile, string | Error]) {\r\n        console.log('onUploadError:', dz, err)\r\n    }\r\n\r\n    toggleAutoReset(value: boolean) {\r\n        this.autoReset = !!value\r\n        const timeout = this.autoReset ? 5000 : undefined\r\n        this.config.autoReset = timeout\r\n        this.config.errorReset = timeout\r\n        this.config.cancelReset = timeout\r\n    }\r\n\r\n    resetDropzone(): void {\r\n        if (this.type === 'directive' && this.directiveRef) {\r\n            this.directiveRef.reset()\r\n        } else if (this.type === 'component' && this.componentRef && this.componentRef.directiveRef) {\r\n            this.componentRef.directiveRef.reset()\r\n        }\r\n    }\r\n\r\n}\r\n"}}]);