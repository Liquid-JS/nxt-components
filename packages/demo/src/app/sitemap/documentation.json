{
    "pipes": [],
    "interfaces": [
        {
            "name": "NgAddSchematicOptions",
            "id": "interface-NgAddSchematicOptions-f2d6c2380a21784f71f40aa8b4026ed2a692bd9f5688f53995e8eee12d4174855df70711c752a3bd9c791df42b0877d69970dab1afc9acca7d48d47832b7c101",
            "file": "src/schematics/ng-add/schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Base URL where the page will be deployed, e.g. <a href=\"https://example.com/\">https://example.com/</a> or <a href=\"https://example.com/subdir/\">https://example.com/subdir/</a></p>\n",
                    "line": 20,
                    "rawdescription": "\n\nBase URL where the page will be deployed, e.g. https://example.com/ or https://example.com/subdir/\n"
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>The project for which the sitemap config should be added</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nThe project for which the sitemap config should be added\n"
                },
                {
                    "name": "srcDirectory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Directory where prerendered contents are located, e.g. <code>dist/browser</code></p>\n",
                    "line": 16,
                    "rawdescription": "\n\nDirectory where prerendered contents are located, e.g. `dist/browser`\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>This file was automatically generated by json-schema-to-typescript.\nDO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\nand run json-schema-to-typescript to regenerate this file.</p>\n",
            "rawdescription": "\n\nThis file was automatically generated by json-schema-to-typescript.\nDO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\nand run json-schema-to-typescript to regenerate this file.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "SitemapBuilderOptions",
            "id": "interface-SitemapBuilderOptions-43b98b7ac2c87f6d03e58a136bb8a621acdcd5de57f3013ba1dc6ae895c3eca06b63268d586bdd385a95e1c5a93ec3499b7d6dbc0e78a0efaf832b0297282fc5",
            "file": "src/builders/sitemap/schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "properties": [
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Base URL where the page will be deployed, e.g. <a href=\"https://example.com/\">https://example.com/</a> or <a href=\"https://example.com/subdir/\">https://example.com/subdir/</a></p>\n",
                    "line": 19,
                    "rawdescription": "\n\nBase URL where the page will be deployed, e.g. https://example.com/ or https://example.com/subdir/\n"
                },
                {
                    "name": "changeFreq",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"always\" | \"hourly\" | \"daily\" | \"weekly\" | \"monthly\" | \"yearly\" | \"never\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Change frequency, how often the content is expected to change</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nChange frequency, how often the content is expected to change\n"
                },
                {
                    "name": "lastMod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Either ISO date, datetime, or a string &#39;today&#39;; last modified date of the pages</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nEither ISO date, datetime, or a string 'today'; last modified date of the pages\n"
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"0\" | \"0.1\" | \"0.2\" | \"0.3\" | \"0.4\" | \"0.5\" | \"0.6\" | \"0.7\" | \"0.8\" | \"0.9\" | \"1\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Url priority</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nUrl priority\n"
                },
                {
                    "name": "srcDirectory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Directory where prerendered contents are located, e.g. <code>dist/browser</code></p>\n",
                    "line": 15,
                    "rawdescription": "\n\nDirectory where prerendered contents are located, e.g. `dist/browser`\n"
                },
                {
                    "name": "trailingSlash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Include trailing slash in the URLs; disabling this option will likely cause redirects when serving prerendered pages</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nInclude trailing slash in the URLs; disabling this option will likely cause redirects when serving prerendered pages\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Generate sitemap from prerendered routes</p>\n",
            "rawdescription": "\n\nGenerate sitemap from prerendered routes\n",
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "sitemapBuilder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/builders/sitemap/builder.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Builder<>",
                "defaultValue": "createBuilder(async (options: SitemapBuilderOptions, context: BuilderContext): Promise<BuilderOutput> => {\r\n    const srcDirectory = withTrailingSlash(options.srcDirectory)\r\n    const baseUrl = new URL(withTrailingSlash(options.baseUrl))\r\n    const path = baseUrl.pathname\r\n    const lastmod = options.lastMod == 'today'\r\n        ? new Date()\r\n        : options.lastMod\r\n            ? new Date(options.lastMod)\r\n            : undefined\r\n\r\n    const changefreq = options.changeFreq\r\n    const priority = options.priority ?? 0.5\r\n\r\n    const targetFile = normalize(join(srcDirectory, 'sitemap.xml'))\r\n\r\n    context.reportStatus(`Generating sitemap in ${targetFile}.`)\r\n\r\n    try {\r\n        const files = await findFiles(srcDirectory, 'index.html')\r\n\r\n        if (!files.length) {\r\n            throw new Error(`No matching files found in ${srcDirectory}.`)\r\n        }\r\n\r\n        const sitemap = new SitemapStream({ hostname: options.baseUrl })\r\n        const target = createWriteStream(targetFile)\r\n        const promise = streamToPromise(sitemap.pipe(target))\r\n\r\n        files.forEach(file => {\r\n            let pathname = path + file\r\n            if (!options.trailingSlash && pathname.endsWith('/'))\r\n                pathname = pathname.substring(0, pathname.length - 1)\r\n            if (options.trailingSlash)\r\n                pathname = withTrailingSlash(pathname)\r\n\r\n            sitemap.write({\r\n                url: pathname,\r\n                changefreq,\r\n                priority,\r\n                lastmod\r\n            })\r\n        })\r\n        sitemap.end()\r\n\r\n        await promise\r\n    } catch (err) {\r\n        context.logger.error('Failed to generate sitemap.')\r\n        return {\r\n            success: false,\r\n            error: (err as Error).message\r\n        }\r\n    }\r\n\r\n    context.reportStatus('Done.')\r\n    return { success: true }\r\n})",
                "rawdescription": "Angular builder for generating sitemap from prerendered routes",
                "description": "<p>Angular builder for generating sitemap from prerendered routes</p>\n"
            }
        ],
        "functions": [
            {
                "name": "ngAdd",
                "file": "src/schematics/ng-add/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "NgAddSchematicOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "NgAddSchematicOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/builders/sitemap/builder.ts": [
                {
                    "name": "sitemapBuilder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/builders/sitemap/builder.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Builder<>",
                    "defaultValue": "createBuilder(async (options: SitemapBuilderOptions, context: BuilderContext): Promise<BuilderOutput> => {\r\n    const srcDirectory = withTrailingSlash(options.srcDirectory)\r\n    const baseUrl = new URL(withTrailingSlash(options.baseUrl))\r\n    const path = baseUrl.pathname\r\n    const lastmod = options.lastMod == 'today'\r\n        ? new Date()\r\n        : options.lastMod\r\n            ? new Date(options.lastMod)\r\n            : undefined\r\n\r\n    const changefreq = options.changeFreq\r\n    const priority = options.priority ?? 0.5\r\n\r\n    const targetFile = normalize(join(srcDirectory, 'sitemap.xml'))\r\n\r\n    context.reportStatus(`Generating sitemap in ${targetFile}.`)\r\n\r\n    try {\r\n        const files = await findFiles(srcDirectory, 'index.html')\r\n\r\n        if (!files.length) {\r\n            throw new Error(`No matching files found in ${srcDirectory}.`)\r\n        }\r\n\r\n        const sitemap = new SitemapStream({ hostname: options.baseUrl })\r\n        const target = createWriteStream(targetFile)\r\n        const promise = streamToPromise(sitemap.pipe(target))\r\n\r\n        files.forEach(file => {\r\n            let pathname = path + file\r\n            if (!options.trailingSlash && pathname.endsWith('/'))\r\n                pathname = pathname.substring(0, pathname.length - 1)\r\n            if (options.trailingSlash)\r\n                pathname = withTrailingSlash(pathname)\r\n\r\n            sitemap.write({\r\n                url: pathname,\r\n                changefreq,\r\n                priority,\r\n                lastmod\r\n            })\r\n        })\r\n        sitemap.end()\r\n\r\n        await promise\r\n    } catch (err) {\r\n        context.logger.error('Failed to generate sitemap.')\r\n        return {\r\n            success: false,\r\n            error: (err as Error).message\r\n        }\r\n    }\r\n\r\n    context.reportStatus('Done.')\r\n    return { success: true }\r\n})",
                    "rawdescription": "Angular builder for generating sitemap from prerendered routes",
                    "description": "<p>Angular builder for generating sitemap from prerendered routes</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "src/schematics/ng-add/index.ts": [
                {
                    "name": "ngAdd",
                    "file": "src/schematics/ng-add/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "type": "NgAddSchematicOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "NgAddSchematicOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    }
}